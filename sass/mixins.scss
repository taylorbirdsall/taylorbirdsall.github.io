@mixin bp($min, $max) {

  $MediaQueriesEnabled: true !default;

  @if $MediaQueriesEnabled
  {
    $bps: xs, sm, md, lg;
    $valid-input: true;
    $mq: "";

    $maxes: (
      xs: "(max-width: #{$screen-xs-max})",
      sm: "(max-width: #{$screen-sm-max})",
      md: "(max-width: #{$screen-md-max})"
    );

    $mins: (
      sm: "(min-width: #{$screen-sm-min})",
      md: "(min-width: #{$screen-md-min})",
      lg: "(min-width: #{$screen-lg-min})"
    );

    @if($min != null and $max != null)
    {
      @if index($bps, $min) and index($bps, $max)
      {
        $mq: "#{map-get($mins, $min)} and #{map-get($maxes, $max)}"
      }
      @else
      {
        @warn "Breakpoint parameters must be either xs, sm, md, or lg.";
        $valid-input: false;
      }
    }

    @else if ($min != null and $max == null)
    {
      @if $min == xs
      {
        @warn "There is no min-width for Mobile Screens.";
        $valid-input: false;
      }
      @else
      {
        $mq: "#{map-get($mins, $min)}"
      }
    }

    @else if ($min == null and $max != null)
    {
      @if $max == lg
      {
        @warn "There is no Max Width for Large Screens.";
        $valid-input: false;
      }
      @else
      {
        $mq: "#{map-get($maxes, $max)}"
      }
    }
    @else
    {
      @warn "You must pass a parameter to the bp() mixin!";
      $valid-input: false;
    }
    @if $valid-input
    {
      @media #{$mq} { @content;}
    }
  }
}

@mixin bplte($max) {
  @include bp(null, $max) {
    @content;
  }
}

@mixin bpgte($min) {
  @include bp($min, null) {
    @content;
  }
}

@function toRem($number)
{
  @if unit($number) == 'px' {
    $stripped: $number / ($number * 0 + 1);
    $converted: ($stripped/16 * 1rem);
    @return $converted;
  }

  @else {
    @return $number;
  }
}

@mixin font-sizes($font-size, $line-height, $font-size-xs: $font-size, $line-height-xs: $line-height)
{
  font-size: toRem($font-size-xs);
  line-height: toRem($line-height-xs);

  @if $font-size != $font-size-xs
  {
    @include bpgte(sm)
    {
      font-size: toRem($font-size);
    }
  }

  @if $line-height != $line-height-xs
  {
    @include bpgte(sm)
    {
      line-height: toRem($line-height);
    }
  }
}

@mixin sr-only()
{
  position: absolute;
  width: toRem(1px);
  height: toRem(1px);
  margin: toRem(-1px);
  padding: 0;
  overflow: hidden;
  clip: rect(0,0,0,0);
  border: 0;
  white-space: nowrap;
}

@mixin link-underline-center($color: $black)
{
  position: relative;

  color: $color;

  transition: color 300ms ease-in-out;

  &::before
  {
    content: "";

    position: absolute;
    bottom: toRem(-3px);
    left: 0;

    width: 100%;
    height: toRem(2px);

    background-color: $color;

    visibility: hidden;

    transform: scaleX(0);
    transition: all 300ms ease-in-out;
  }

  &:hover
  {
    color: $color;
  }

  &:hover::before
  {
    visibility: visible;
    transform: scaleX(1);
  }
}

@mixin link-underline-left($color: $white)
{
  position: relative;

  color: $color;

  &::after
  {
    content: '';

    position: absolute;
    left: 0;
    bottom: toRem(-3px);

    height: toRem(2px);
    width: 0;

    background-color: $color;

    transition: all 350ms ease-in-out;
  }

  &:hover
  {
    color: $color;

    &::after
    {
      width: 100%;
    }
  }
}

@mixin link-overline
{
  &::before, &::after
  {
    content: '';

    position: absolute;
    top: 100%;
    left: 0;

    width: 100%;
    height: toRem(3px);

    background: $gray-1;

    transform: scale(0.85);
    transition: transform 300ms ease;
  }

  &::after
  {
    opacity: 0;
    transition: top 300ms ease, opacity 300ms ease, transform 300ms ease;
  }

  &:hover
  {
    &::before, &::after
    {
      transform: scale(1);
    }

    &::after
    {
      top: 0%;
      opacity: 1;
    }
  }
}

@mixin font-header
{
  @include font-sizes(20px, 1);
  text-transform: uppercase;
  color: $gray-1;
}

@mixin font-footer
{
  @include font-sizes(16px, 1);
  color: $gray-1;
}

@mixin font-white
{
  color: $white;
}

@mixin float-shadow {
  position: relative;

  box-shadow: 6px 6px 5px 0px rgba(0,0,0,0.21);

  transform: perspective(1px) translateZ(0);
	transition-duration: 0.3s;
	transition-property: transform;

	&:before {
    content: '';

    position: absolute;
    top: 100%;
    left: 5%;
    z-index: -1;

	  height: 10px;
	  width: 90%;

    pointer-events: none;

	  opacity: 0;

	  background: -webkit-radial-gradient(center, ellipse, rgba(0,0,0,.35) 0%, rgba(0, 0, 0, 0) 80%);
	  background: radial-gradient(ellipse at center, rgba(0,0,0,.35) 0%,rgba(0,0,0,0) 80%); /* W3C */

		transition-duration: 0.3s;
		transition-property: "transform, opacity";
	}

	&:hover,
	&:focus,
	&:active {
    box-shadow: 0 0 0 0;
		transform: translateY(-5px);

		&:before {
			opacity: 1;
			transform: translateY(5px);
		}
	}
}

@mixin reveal {
  transform: perspective(1px) translateZ(0);
  box-shadow: 0 0 1px rgba(0, 0, 0, 0);
	position: relative;
	overflow: hidden;

	&:before {
		content: "";
		position: absolute;
		z-index: 0;
		left: 0px;
		right: 0px;
		top: 0px;
		bottom: 0px;
		border-color: $blue-1;
		border-style: solid;
		border-width: 0;
    border-radius: 50%;
		transition-property: border-width;
		transition-duration: 0.3s;
		transition-timing-function: linear;
	}

	&:hover,
	&:focus,
	&:active {

		&:before {
			transform: translateY(0);
			border-width: 10px;
		}
	}
}
